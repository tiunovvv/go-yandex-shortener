// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_storage is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// GetFullURL mocks base method.
func (m *MockStore) GetFullURL(ctx context.Context, shortURL string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockStoreMockRecorder) GetFullURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockStore)(nil).GetFullURL), ctx, shortURL)
}

// GetPing mocks base method.
func (m *MockStore) GetPing(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPing", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPing indicates an expected call of GetPing.
func (mr *MockStoreMockRecorder) GetPing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockStore)(nil).GetPing), ctx)
}

// GetShortURL mocks base method.
func (m *MockStore) GetShortURL(ctx context.Context, fullURL string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", ctx, fullURL)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockStoreMockRecorder) GetShortURL(ctx, fullURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockStore)(nil).GetShortURL), ctx, fullURL)
}

// GetURLByUserID mocks base method.
func (m *MockStore) GetURLByUserID(ctx context.Context, userID string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByUserID", ctx, userID)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetURLByUserID indicates an expected call of GetURLByUserID.
func (mr *MockStoreMockRecorder) GetURLByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByUserID", reflect.TypeOf((*MockStore)(nil).GetURLByUserID), ctx, userID)
}

// SaveURL mocks base method.
func (m *MockStore) SaveURL(ctx context.Context, shortURL, fullURL, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, shortURL, fullURL, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockStoreMockRecorder) SaveURL(ctx, shortURL, fullURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockStore)(nil).SaveURL), ctx, shortURL, fullURL, userID)
}

// SaveURLBatch mocks base method.
func (m *MockStore) SaveURLBatch(ctx context.Context, urls map[string]string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURLBatch", ctx, urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURLBatch indicates an expected call of SaveURLBatch.
func (mr *MockStoreMockRecorder) SaveURLBatch(ctx, urls, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURLBatch", reflect.TypeOf((*MockStore)(nil).SaveURLBatch), ctx, urls, userID)
}

// SetDeletedFlag mocks base method.
func (m *MockStore) SetDeletedFlag(ctx context.Context, userID, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeletedFlag", ctx, userID, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeletedFlag indicates an expected call of SetDeletedFlag.
func (mr *MockStoreMockRecorder) SetDeletedFlag(ctx, userID, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletedFlag", reflect.TypeOf((*MockStore)(nil).SetDeletedFlag), ctx, userID, shortURL)
}
